---
// Page 2
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/thebutton/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Page 2</title>
  </head>
  <body>
    <div class="container">
     <img src="/thebutton/image2.jpg" />
      <a href="/" class="nav-button" onclick="playClickSound()"></a>
    </div>

    <script>
      function playClickSound() {
        createExplosionSound();
      }

      function createExplosionSound() {
        // Create audio context
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // Create multiple noise sources for explosion effect
        const duration = 5; // 5 seconds
        
        // Main explosion blast
        const noiseBuffer = audioContext.createBuffer(1, audioContext.sampleRate * duration, audioContext.sampleRate);
        const noiseData = noiseBuffer.getChannelData(0);
        
        // Generate noise for explosion
        for (let i = 0; i < noiseData.length; i++) {
          noiseData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / noiseData.length, 2);
        }
        
        // Create noise source
        const noiseSource = audioContext.createBufferSource();
        noiseSource.buffer = noiseBuffer;
        
        // Create filters for more realistic explosion sound
        const lowPassFilter = audioContext.createBiquadFilter();
        lowPassFilter.type = 'lowpass';
        lowPassFilter.frequency.setValueAtTime(800, audioContext.currentTime);
        lowPassFilter.frequency.exponentialRampToValueAtTime(50, audioContext.currentTime + duration);
        
        const highPassFilter = audioContext.createBiquadFilter();
        highPassFilter.type = 'highpass';
        highPassFilter.frequency.setValueAtTime(30, audioContext.currentTime);
        
        // Create gain for volume control and fade out
        const gainNode = audioContext.createGain();
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
        
        // Add some reverb/delay effect
        const delayNode = audioContext.createDelay();
        delayNode.delayTime.setValueAtTime(0.1, audioContext.currentTime);
        
        const delayGain = audioContext.createGain();
        delayGain.gain.setValueAtTime(0.2, audioContext.currentTime);
        
        // Connect the audio graph
        noiseSource.connect(highPassFilter);
        highPassFilter.connect(lowPassFilter);
        lowPassFilter.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        // Add delay effect
        lowPassFilter.connect(delayNode);
        delayNode.connect(delayGain);
        delayGain.connect(gainNode);
        
        // Add rumble effect (low frequency oscillator)
        const rumbleOsc = audioContext.createOscillator();
        rumbleOsc.type = 'sine';
        rumbleOsc.frequency.setValueAtTime(40, audioContext.currentTime);
        rumbleOsc.frequency.exponentialRampToValueAtTime(20, audioContext.currentTime + duration);
        
        const rumbleGain = audioContext.createGain();
        rumbleGain.gain.setValueAtTime(0.4, audioContext.currentTime);
        rumbleGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
        
        rumbleOsc.connect(rumbleGain);
        rumbleGain.connect(audioContext.destination);
        
        // Start the sounds
        noiseSource.start(audioContext.currentTime);
        rumbleOsc.start(audioContext.currentTime);
        
        // Stop after duration
        noiseSource.stop(audioContext.currentTime + duration);
        rumbleOsc.stop(audioContext.currentTime + duration);
      }
    </script>
  </body>
</html>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html, body {
    height: 100%;
    overflow: hidden;
  }

  .container {
    position: relative;
    width: 100vw;
    height: 100vh;
  }

  .fullscreen-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  

  
</style>