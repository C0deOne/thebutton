---
---


<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Page 1</title>
  </head>
  <body>
    <div class="container">
<img src="/thebutton/image1.jpg" alt="Page 1 Image" class="fullscreen-image" />
      
      <!-- Clickable red button overlay -->
      <a href="/thebutton/page2" class="red-button" onclick="handleNavigation(event)" aria-label="Go to Page 2"></a>
    </div>

    <script>
      function handleNavigation(event) {
        event.preventDefault();
        playClickSound(() => {
          window.location.href = "/page2";
        });
      }

      function playClickSound(callback) {
        createExplosionSound(callback);
      }

      function createExplosionSound(onComplete) {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const duration = 5;

        const noiseBuffer = audioContext.createBuffer(1, audioContext.sampleRate * duration, audioContext.sampleRate);
        const noiseData = noiseBuffer.getChannelData(0);

        for (let i = 0; i < noiseData.length; i++) {
          noiseData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / noiseData.length, 2);
        }

        const noiseSource = audioContext.createBufferSource();
        noiseSource.buffer = noiseBuffer;

        const lowPassFilter = audioContext.createBiquadFilter();
        lowPassFilter.type = 'lowpass';
        lowPassFilter.frequency.setValueAtTime(800, audioContext.currentTime);
        lowPassFilter.frequency.exponentialRampToValueAtTime(50, audioContext.currentTime + duration);

        const highPassFilter = audioContext.createBiquadFilter();
        highPassFilter.type = 'highpass';
        highPassFilter.frequency.setValueAtTime(30, audioContext.currentTime);

        const gainNode = audioContext.createGain();
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);

        const delayNode = audioContext.createDelay();
        delayNode.delayTime.setValueAtTime(0.1, audioContext.currentTime);

        const delayGain = audioContext.createGain();
        delayGain.gain.setValueAtTime(0.2, audioContext.currentTime);

        noiseSource.connect(highPassFilter);
        highPassFilter.connect(lowPassFilter);
        lowPassFilter.connect(gainNode);
        gainNode.connect(audioContext.destination);

        lowPassFilter.connect(delayNode);
        delayNode.connect(delayGain);
        delayGain.connect(gainNode);

        const rumbleOsc = audioContext.createOscillator();
        rumbleOsc.type = 'sine';
        rumbleOsc.frequency.setValueAtTime(40, audioContext.currentTime);
        rumbleOsc.frequency.exponentialRampToValueAtTime(20, audioContext.currentTime + duration);

        const rumbleGain = audioContext.createGain();
        rumbleGain.gain.setValueAtTime(0.4, audioContext.currentTime);
        rumbleGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);

        rumbleOsc.connect(rumbleGain);
        rumbleGain.connect(audioContext.destination);

        noiseSource.onended = () => {
          if (typeof onComplete === 'function') onComplete();
        };

        noiseSource.start(audioContext.currentTime);
        rumbleOsc.start(audioContext.currentTime);
        noiseSource.stop(audioContext.currentTime + duration);
        rumbleOsc.stop(audioContext.currentTime + duration);
      }
    </script>
  </body>
</html>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html, body {
    height: 100%;
    overflow: hidden;
  }

  .container {
    position: relative;
    width: 100vw;
    height: 100vh;
  }

  .fullscreen-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .red-button {
  position: absolute;
  left: 46%;
  top: 65%; /* Adjusted from 62% */
  transform: translate(-50%, -50%);
  width: 150px;
  height: 150px;
  border-radius: 50%;
  background: transparent;
  cursor: pointer;
  z-index: 10;
}


  .red-button:hover {
    background: rgba(255, 255, 255, 0.1);
  }
</style>
